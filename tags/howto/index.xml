<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HowTo on Riyaz Ali</title><link>https://riyazali.net/tags/howto/</link><description>Recent content in HowTo on Riyaz Ali</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><copyright>Â© Riyaz Ali</copyright><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://riyazali.net/tags/howto/index.xml" rel="self" type="application/rss+xml"/><item><title>Berkeley Packet Filter in Golang</title><link>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</guid><description>Recently I stumbled upon a use case where I was looking to setup a Wireguard (udp) tunnel across two nodes behind different NATs. I wanted to implement something like UDP Hole Punching and came across this mailing list message from 2016 which linked to the contrib/nat-hole-punching source in Wireguard.
I&amp;rsquo;ll cover the whole hole punching mechanism, perhaps, in a different article. But for context, the mentioned source used raw linux sockets and classic Berkeley Packet Filter to inject custom packets and do hole punching.</description></item><item><title>Using interfaces in Go</title><link>https://riyazali.net/posts/using-interfaces-in-go/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/using-interfaces-in-go/</guid><description>A lot have changed in the past few months!
I&amp;rsquo;ve started a new job @ CloudCover and have also started contributing to golang projects!
The inspiration for this post comes from a (slightly) confusing topic in golang which I initially struggled to understand, and that&amp;rsquo;s interfaces!
This post doesn&amp;rsquo;t cover what interfaces are! There are lots of really good articles on the internet for that.
What I really want to focus on is &amp;ldquo;how&amp;rdquo; you can use them and what common pitfalls to avoid (especially if you come from Java / C#)</description></item><item><title>Google Image Proxy</title><link>https://riyazali.net/posts/google-image-proxy/</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/google-image-proxy/</guid><description>Continuing with app that I created as a project for the Udacity Android Nanodegree program, I faced a new challenge! The challenge was to load poster images from TMDb Image server inside my app!
Is it even a challenge? One could say that I could&amp;rsquo;ve simply used a library like Picasso or Glide to offload image loading to the tried and trusted tools. But my main challenge was not just to load the image but to load the perfect image.</description></item><item><title>Android Support Paging Library</title><link>https://riyazali.net/posts/android-support-paging-library/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/android-support-paging-library/</guid><description>Recently, I was working on a project for the Udacity Android Nanodegree program to develop an Android application for TMDb to list movies using the TMDb API.
As you might&amp;rsquo;ve guessed, TMDb has a huge collection of movies, and so a need for paging the data was quite obvious from the very begining of the project.
So I started looking into ways in which I could&amp;rsquo;ve implemented paging with my RecyclerView.</description></item><item><title>Discourse Login on Android</title><link>https://riyazali.net/posts/discourse-login-on-android/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/discourse-login-on-android/</guid><description>A few days back, I was looking for a hobby side-project to work on. I wanted to develop an Android application (open source) and to collaborate with my peers on Google Udacity Android scholarship program. On the Udacity discussion forum, there were many threads filled with exciting ideas but they all were either too ambitious or required quite a bit of time.
Then, one day while checking into the forum an idea struck me!</description></item></channel></rss>