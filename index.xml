<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Riyaz Ali</title><link>https://riyazali.net/</link><description>Recent content on Riyaz Ali</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><copyright>¬© Riyaz Ali</copyright><lastBuildDate>Sat, 27 Mar 2021 02:00:00 +0000</lastBuildDate><atom:link href="https://riyazali.net/index.xml" rel="self" type="application/rss+xml"/><item><title>The less trodden path with sqlite</title><link>https://riyazali.net/posts/the-less-trodden-path-with-sqlite/</link><pubDate>Sat, 27 Mar 2021 02:00:00 +0000</pubDate><guid>https://riyazali.net/posts/the-less-trodden-path-with-sqlite/</guid><description>Lately, I&amp;rsquo;ve been tinkering around a bit with sqlite3, and this post contains a brief of some exciting set of features and interfaces that I&amp;rsquo;ve re-discovered during the process.
sqlite3 isn&amp;rsquo;t exactly new. It&amp;rsquo;s been around for almost two decades now (much longer than I&amp;rsquo;ve known coding myself üòõ). There&amp;rsquo;s plethora of articles on the internet describing what it is, what makes it special, when you should ideally use it (and when not) and why &amp;ldquo;it&amp;rsquo;s the only database you will ever need&amp;rdquo;.</description></item><item><title>Berkeley Packet Filter in Golang</title><link>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</guid><description>Recently I stumbled upon a use case where I was looking to setup a Wireguard (udp) tunnel across two nodes behind different NATs. I wanted to implement something like UDP Hole Punching and came across this mailing list message from 2016 which linked to the contrib/nat-hole-punching source in Wireguard.
I&amp;rsquo;ll cover the whole hole punching mechanism, perhaps, in a different article. But for context, the mentioned source used raw linux sockets and classic Berkeley Packet Filter to inject custom packets and do hole punching.</description></item><item><title>Using interfaces in Go</title><link>https://riyazali.net/posts/using-interfaces-in-go/</link><pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/using-interfaces-in-go/</guid><description>A lot have changed in the past few months!
I&amp;rsquo;ve started a new job @ CloudCover and have also started contributing to golang projects!
The inspiration for this post comes from a (slightly) confusing topic in golang which I initially struggled to understand, and that&amp;rsquo;s interfaces!
This post doesn&amp;rsquo;t cover what interfaces are! There are lots of really good articles on the internet for that.
What I really want to focus on is &amp;ldquo;how&amp;rdquo; you can use them and what common pitfalls to avoid (especially if you come from Java / C#)</description></item><item><title>Why documentation matters</title><link>https://riyazali.net/posts/why-documentation-matters/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/why-documentation-matters/</guid><description>tl;dr Good documentation gives the developers the necessary control to maintain a system - nochance @ stackexchange
But good code doesn&amp;rsquo;t need documentation ü§î Remember, documentation go way beyond the comments that are inserted in code. Often times, they&amp;rsquo;re a combination of well describing code comments, design documents, business requirement documents and other relevant pieces.
Ain‚Äôt nobody got time for that ‚è∞ The main reason code goes undocumented is because of time!</description></item><item><title>Git Workflow</title><link>https://riyazali.net/posts/git-workflow/</link><pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/git-workflow/</guid><description>In this post I&amp;rsquo;m going to write about the fork-clone-pull that we&amp;rsquo;ve been using for some time now at work.
To begin with, the Fork workflow (just workflow from now on) extend Github&amp;rsquo;s Workflow and adds forking to the mix..
And why do that? Several benefits.
You don&amp;rsquo;t need to give everyone write access to the central repository It keeps the central repository &amp;ldquo;clean&amp;rdquo; (arguable..) by not polluting it with developers' feature branches Developers can form subteams (by adding other dev&amp;rsquo;s clone as a remote) (useful for collaborating, pair-programming etc.</description></item><item><title>Design Docs</title><link>https://riyazali.net/posts/design-docs/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/design-docs/</guid><description>A design doc ‚Äî also known as a technical spec ‚Äî is a description of how you plan to solve a problem. It&amp;rsquo;s one of the most useful tool for making sure the right work gets done.
It&amp;rsquo;s just more overhead man.. ü§∑‚Äç‚ôÇÔ∏è people often claim that it‚Äôs because they‚Äôre saving time by skipping the spec-writing phase.
But what they don&amp;rsquo;t realise is that in the long run (even for a smaller project that&amp;rsquo;s true), they might be spending a lot more time fixing, iterating and communicating all the same stuff (over and over again) what they could have done once if they had written a proper spec for it.</description></item><item><title>Google Image Proxy</title><link>https://riyazali.net/posts/google-image-proxy/</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/google-image-proxy/</guid><description>Continuing with app that I created as a project for the Udacity Android Nanodegree program, I faced a new challenge! The challenge was to load poster images from TMDb Image server inside my app!
Is it even a challenge? One could say that I could&amp;rsquo;ve simply used a library like Picasso or Glide to offload image loading to the tried and trusted tools. But my main challenge was not just to load the image but to load the perfect image.</description></item><item><title>Android Support Paging Library</title><link>https://riyazali.net/posts/android-support-paging-library/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/android-support-paging-library/</guid><description>Recently, I was working on a project for the Udacity Android Nanodegree program to develop an Android application for TMDb to list movies using the TMDb API.
As you might&amp;rsquo;ve guessed, TMDb has a huge collection of movies, and so a need for paging the data was quite obvious from the very begining of the project.
So I started looking into ways in which I could&amp;rsquo;ve implemented paging with my RecyclerView.</description></item><item><title>Discourse Login on Android</title><link>https://riyazali.net/posts/discourse-login-on-android/</link><pubDate>Tue, 10 Apr 2018 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/discourse-login-on-android/</guid><description>A few days back, I was looking for a hobby side-project to work on. I wanted to develop an Android application (open source) and to collaborate with my peers on Google Udacity Android scholarship program. On the Udacity discussion forum, there were many threads filled with exciting ideas but they all were either too ambitious or required quite a bit of time.
Then, one day while checking into the forum an idea struck me!</description></item><item><title>About</title><link>https://riyazali.net/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://riyazali.net/about/</guid><description>Hi, I&amp;rsquo;m Riyaz and I&amp;rsquo;m from India üáÆüá≥. Thanks for visiting my site.
I program and write about software development when I have the time. Checkout some of my projects and blog posts
More information can be found through LinkedInor you could mail me at me@riyazali.net
The Website This site was made on an Apple MBP powered by Hugo hosted on Github Pages. I&amp;rsquo;d love to hear your feedback on this site and my work.</description></item></channel></rss>