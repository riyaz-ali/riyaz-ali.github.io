<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Riyaz Ali</title><link>https://riyazali.net/tags/networking/</link><description>Recent content in Networking on Riyaz Ali</description><generator>Hugo -- gohugo.io</generator><language>en-in</language><copyright>Â© Riyaz Ali</copyright><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://riyazali.net/tags/networking/index.xml" rel="self" type="application/rss+xml"/><item><title>Berkeley Packet Filter in Golang</title><link>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</link><pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate><guid>https://riyazali.net/posts/berkeley-packet-filter-in-golang/</guid><description>Recently I stumbled upon a use case where I was looking to setup a Wireguard (udp) tunnel across two nodes behind different NATs. I wanted to implement something like UDP Hole Punching and came across this mailing list message from 2016 which linked to the contrib/nat-hole-punching source in Wireguard.
I&amp;rsquo;ll cover the whole hole punching mechanism, perhaps, in a different article. But for context, the mentioned source used raw linux sockets and classic Berkeley Packet Filter to inject custom packets and do hole punching.</description></item></channel></rss>